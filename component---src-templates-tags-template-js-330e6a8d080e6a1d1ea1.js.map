{"version":3,"sources":["webpack:///./src/templates/tagsTemplate.js"],"names":["Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","keywords","title","className","map","node","slug","frontmatter","cover","key","to","fixed","childImageSharp","pageQuery"],"mappings":"yOA2EeA,UAlEF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IAD8B,EAERD,EAAKE,kBAA3BC,EAF8B,EAE9BA,MAAOC,EAFuB,EAEvBA,WACTC,EAAeD,EAAN,YACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEK,SAAU,CAAC,mBAAD,2CAMVC,MAAOF,IAGT,6BAAUG,UAAU,mBAClB,wBAAIA,UAAU,MAAMH,GACpB,4BACGF,EAAMM,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,YAAdD,KACAJ,EAAUG,EAAKE,YAAfL,MACAM,EAAUH,EAAKE,YAAfC,MACR,OACE,wBAAIC,IAAKH,GACP,kBAAC,OAAD,CAAMI,GAAIJ,GACR,kBAAC,IAAD,CAAKK,MAAOH,EAAMI,gBAAgBD,QACjCT,QAOX,kBAAC,OAAD,CAAMQ,GAAG,SAAT,eA+BD,IAAMG,EAAS","file":"component---src-templates-tags-template-js-330e6a8d080e6a1d1ea1.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport { Link, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\";\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} project${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  return (\n    <Layout>\n      <SEO\n        keywords={[\n          `product designer`,\n          `illustrator`,\n          `UI designer`,\n          `UX designer`,\n        ]}\n        title={tagHeader}\n      />\n\n      <section  className=\"content-section\">\n        <h2 className=\"h2\">{tagHeader}</h2>\n        <ul>\n          {edges.map(({ node }) => {\n            const { slug } = node.frontmatter;\n            const { title } = node.frontmatter;\n            const { cover } = node.frontmatter;\n            return (\n              <li key={slug}>\n                <Link to={slug}>\n                  <Img fixed={cover.childImageSharp.fixed} />\n                  {title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n\n        <Link to=\"/tags\">All tags</Link>\n      </section>\n    </Layout>\n  );\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            title\n            slug\n            cover {\n              childImageSharp {\n                fixed(width: 200, height: 200) {\n                  ...GatsbyImageSharpFixed\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}